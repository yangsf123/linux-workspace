第十一章  认识与学习bash


echo ${username}

username=${username-root}
echo $username

username="vbird tsai"
username=${username-root}
echo $username

"-"替换
new_var=${old_var-content}  # 新的变量，主要用来替换就变量。新旧变量名称其实经常是一样的


若username未设置或为空字符串，则将username内容置为root
username=""
username=${username-root}       # 被设置为空字符串了，所以当然还是保留为空字符串
echo $username

username=${username:-root}      # 加上:后变量内容为空或者未设置，都能够以后面的内容替换
echo $username


命令:alias,unalias
alias lm="ls -al | more"
unalias lm

alias的定义规则与变量定义规则几乎相同，所以你只要在alias后面加上你的{"别名"='命令参数...'}
命令别名还可以替代已有命令:alias rm="rm -i"(这样每次删除文件时，会提示用户确认是否真的执行删除命令)


命令别名与变量有什么不同呢？
命令别名是新创一个新的命令，可以直接执行该命令。变量则需要使用类似"echo"命令才能够调用变量的内容




历史命令：history

alias h="history" #为history命令设置别名h

history [n] # 显示最近使用的n条命令
history [-c]    # 将目前shell中的所有history内容全部消除
history -a  # 将目前新增的history命令新增入histfiles中，若没有加histfiles，则默认写入~/.bash_history
history -r # 将histfiles的内容读到目前这个shell的history记忆中
history -w # 将目前的history记忆内容写入histfiles中


echo $HISTSIZE
    当我们以bash登录Linux主机之后，系统会主动由主文件夹的~/.bash_history读取以前曾经下过的命令，那么~/.bash_history会记录几条数据？这就与bash的HISTSIZE这个变量设置值有关了。
    假设我这次登录主机后，共执行过100次命令，等我注销时，系统将会将101-600总共500条历史命令更新到~/.bash_history当中。也就是说，历史命令在我注销时，会将最近的HISTSIZE条记录到我的记录文件当中。
    当然也可以用history -w命令强制写入。因为~/.bash_history记录的条数永远都是HISTSIZE那么多，旧的信息会被主动去掉。仅保留最新的。


    !number #执行第几条命令
    !command #执行command开头的那个命令
    !!      #执行上一个命令


同一个账号同时多次登录的history写入问题
    同时开好几个bash窗口，这些bash的身份都是root。所有的bash都是自己的1000笔记录在内存中。因为等到注销时才会更新记录文件，所以最后注销的那个bash才是最后写入的数据。
    有余多重登录会有这样的问题，所以很多朋友都习惯单一bash登录，再用作业控制(job control)来切换不同工作。





11.4 Bash Shell的操作环境

路径与命令查找顺序
1.以相对/绝对路径执行命令，例如"bin/ls"或"./ls"
2.有alias找到该命令来执行
3.有bash内置的(buildin)命令来执行
4.通过$PATH这个变量的顺序找到的第一个命令来执行



bash等登录与欢迎信息:/etc/issue,/etc/motd

\d      本地段时间的日期
\|      显示第几个终端机接口
\m      显示硬件的等级(i386/i486/i586/i686...)
\n      显示主机的网络名称
\o      显示domian name
\r      操作系统的版本(相当于uname-r)
\t      显示本地端时间的时间
\s      操作系统的名称
\v      操作系统的版本

除了/etc/issue，还有/etc/issue.net这个是提供给telnet这个远程登录程序用的。当我们使用telnet连接到主机时，主机的登录界面就会显示/etc/issue.net而不是/etc/issue

如果想让用户登录后取得一些信息，例如告诉你想让大家知道的信息，那么可以将信息加入/etc/motd里面去。例如，当用户登录后，告诉登录者系统将会在某个固定时间进行维护工作，可以这样做：
vi /etc/motd
Hello everyone,
Our server will be maintained at 2017/10/10 0:00~24:00.
Please don't login server at that time.^_^


bash的环境配置文件
系统的环境配置文件，让bash在启动的时候直接读取这些配置文件，以规划好bash的操作环境。这些配置文件又可以分为全体系统的配置文件以及用户个人偏好配置文件。

login shell与non-login shell:取得bash的情况中，读取的配置文件数据不一致
    重点在于有没有登录;
    login shell:取得bash时需要完整的登录流程的，就称为login shell。举例来说，你要由tty1~tty6登录，需要输入用户的账号与密码，此时取得的bash就称为"login shell"
    non-login shell:取得bash接口的方法不需要重复登录的举动，举例来说，你以X Window登录Linux后，再以X的图形界面启动终端机，此时那个终端接口并没有需要再次输入账号与密码，那个bash的环境就称为non-login shell。你在原本的bash环境下再次执行bash这个命令，同样也没有输入账号密码，那第二个bash(子进程)也是non-login shell
    
    login shell只会读取两个配置文件：
        1./etc/profile:这是系统整体的设置，你最好不要修改这个文件
        2.~/.bash_profile或~/.bash_login或~/.profile:属于用户个人设置，你要改自己的数据，就写入这里

        source:读入环境配置文件的命令
            由于/etc/profile与~/.bash_profile都是在去的login shell的时候才会读取的配置文件，所以如果你将自己的偏好设置写入上述的文件后，通常都是得注销再登录后该设置才会生效source 配置文件名


        source或.都可以将配置文件的内容读进目前的shell环境中


数据流重定向
    标准输入流：0,</<<
    标准输出流: 1,>/>>
    标准错误流: 2,2>/2>>

    >:创建/覆盖文件
    >>:创建/累加到文件

    /dev/null:垃圾黑洞设备
        1.将错误信息忽略掉不显示也不存储：find /home -name .bashrc 2>/dev/null
        2.讲正确与错误数据通通写入同一个文件中去:
            find /home -name .bashrc > list 2>list  #错误,两条数据同时写入一个文件，又没有使用特殊的语法，此时两条数据可能会交叉写入该文件内，造成次序混乱
            find /home -name .bashrc > list 2&1>    #正确
            find /home -name .bashrc &> list    #正确

    standard input: <与<<
        将原本需要用键盘输入的数据改由文件内容来替代
        <<:输入结束的意思.cat > catfile << "eof"


    为何要使用命令输出重定向呢？
    1.屏幕输出的信息很重要，而且我们需要将它存下来的时候
    2.后台执行中的程序，不希望它干扰屏幕正常的输出结果时
    3.一些系统的例行命令的执行结果，希望它可以存下来时
    4.一些执行命令的可能已知错误信息时，想以"2>/dev/null"将它丢掉时
    5.错误信息与正确信息分别输出时
        

    命令执行的判断依据:; , && ||
        

管道命令
    管道命令仅会处理standard output,对于standard error output会予以忽略
    管道命令必须要能够接收来自前一个的数据成为standard input继续处理才行


    选取命令:cut,grep
        选取信息通常是针对行来分析的，并不是整篇信息分析的

    排序命令:sort,wc,uniq
        
    双重定向命令:tee
        同时将数据流送与文件与屏幕(screen)；而输出到屏幕的，其实就是stdout,可以让下一个命令继续处理

    字符转换命令：tr,col,join,paste,expand
        
